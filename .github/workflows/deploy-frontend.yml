name: Deploy Streamlit Frontend

on:
  push:
    branches:
      - main
    paths:
      - 'frontend/**'
      - '.github/workflows/deploy-frontend.yml'
env:
    ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY_FRONTEND }}
    ACCOUNT_ID: ${{ vars.ACCOUNT_ID }}
    AWS_REGION: ${{ vars.AWS_REGION }}
    SECURITY_GROUP_ID: ${{ vars.SECURITY_GROUP_ID }}
    CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
    SERVICE_NAME: ${{ vars.SERVICE_NAME_FRONTEND }}
    SUBNET_1: ${{ vars.SUBNET_1 }}
    SUBNET_2: ${{ vars.SUBNET_2 }}
    TG_ARN_FRONTEND: ${{vars.TG_ARN_FRONTEND}}
    API_URL: ${{vars.API_URL}}
    COGNITO_CLIENT_ID: ${{ secrets.COGNITO_CLIENT_ID }}
    COGNITO_DOMAIN: ${{ vars.COGNITO_DOMAIN }}
    COGNITO_REDIRECT_URI: ${{ vars.COGNITO_REDIRECT_URI }} 
    COGNITO_CLIENT_SECRET: ${{ secrets.COGNITO_CLIENT_SECRET }} 

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names smartbank-frontend \
          || aws ecr create-repository --repository-name smartbank-frontend

      - name: Build and push Docker image
        run: |
          IMAGE_TAG=frontend-${{ github.sha }}
          IMAGE_URI=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}
          
          docker build -t $IMAGE_URI -f Dockerfile.frontend .
          docker push $IMAGE_URI
      - name: Debug cluster var
        run: |
          echo "CLUSTER_NAME is: ${{ vars.CLUSTER_NAME }}"
      - name: Register ECS Task Definition
        id: register-task

        env:
          IMAGE_TAG: frontend-${{ github.sha }}
        run: |
          IMAGE_URI=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}
          sed "s|{{IMAGE_URI}}|$IMAGE_URI|g;\
               s|{{ACCOUNT_ID}}|$ACCOUNT_ID|g;\
               s|{{API_URL}}|$API_URL|g;\
               s|{{COGNITO_CLIENT_ID}}|$COGNITO_CLIENT_ID|g;\
               s|{{COGNITO_REDIRECT_URI}}|$COGNITO_REDIRECT_URI|g;\
               s|{{COGNITO_DOMAIN}}|$COGNITO_DOMAIN|g;\
               s|{{COGNITO_CLIENT_SECRET}}|$COGNITO_CLIENT_SECRET|g"\
           .github/task-definitions/frontend.json > frontend-task.json

          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://frontend-task.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Authorize security group ingress (port 80)     
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id ${{ vars.SECURITY_GROUP_ID }} \
            --protocol tcp \
            --port 80 \
            --cidr 0.0.0.0/0 || echo "Ingress rule already exists or failed silently"
     

      - name: Delete service if it exists (clean for ALB recreation)
        continue-on-error: true
        run: |
          aws ecs update-service --cluster "$CLUSTER_NAME" --service "$SERVICE_NAME" --desired-count 0 || true
          aws ecs delete-service --cluster "$CLUSTER_NAME" --service "$SERVICE_NAME" --force || true
          echo "Waiting for ECS service to be fully deleted..."
          aws ecs wait services-inactive \
            --cluster $CLUSTER_NAME \
            --services $SERVICE_NAME

      - name: Create ECS Service with ALB
        run: |
          aws ecs create-service \
            --cluster "$CLUSTER_NAME" \
            --service-name "$SERVICE_NAME" \
            --launch-type FARGATE \
            --task-definition "$TASK_DEF_ARN" \
            --desired-count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[\"$SUBNET_1\",\"$SUBNET_2\"],securityGroups=[\"$SECURITY_GROUP_ID\"],assignPublicIp=\"ENABLED\"}" \
            --load-balancers "targetGroupArn=$TG_ARN_FRONTEND,containerName=smartbank-frontend,containerPort=80" \
            --scheduling-strategy REPLICA    
      
      - name: Update ECS Service with latest task definition
        run: |
          echo "Using task definition: $TASK_DEF_ARN"

          aws ecs update-service \
            --cluster "$CLUSTER_NAME" \
            --service "$SERVICE_NAME" \
            --task-definition "$TASK_DEF_ARN" \
            --force-new-deployment


