name: Deploy FastAPI Backend
on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
env:
    ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
    ACCOUNT_ID: ${{ vars.ACCOUNT_ID }}
    AWS_REGION: ${{ vars.AWS_REGION }}
    SECURITY_GROUP_ID: ${{ vars.SECURITY_GROUP_ID }}
    CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
    SERVICE_NAME: ${{ vars.SERVICE_NAME_BACKEND }}
    SUBNET_1: ${{ vars.SUBNET_1 }}
    SUBNET_2: ${{ vars.SUBNET_2 }}
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names smartbank-backend \
          || aws ecr create-repository --repository-name smartbank-backend
      - name: Build and push Docker image
        
        run: |
          IMAGE_TAG=backend-${{ github.sha }}
          IMAGE_URI=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}
          
          docker build -t $IMAGE_URI -f backend/app/Dockerfile.backend .
          docker push $IMAGE_URI

        
      - name: Register ECS Task Definition
        id: register-task
        env:
          IMAGE_TAG: backend-${{ github.sha }}


        run: |
          IMAGE_URI=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}
          sed "s|{{IMAGE_URI}}|$IMAGE_URI|g; s|{{ACCOUNT_ID}}|$ACCOUNT_ID|g" .github/task-definitions/backend.json > backend-task.json

          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://backend-task.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV
 
      - name: Authorize security group ingress (port 80)

        env:
          SECURITY_GROUP_ID: ${{ vars.SECURITY_GROUP_ID }}
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id $SECURITY_GROUP_ID \
            --protocol tcp \
            --port 80 \
            --cidr 0.0.0.0/0 || echo "Ingress rule already exists or failed silently"
      - name: Create ECS Service (if not exists)
        run: |
          echo "Vérification de l'existence du service $SERVICE_NAME dans le cluster $CLUSTER_NAME..."

          SERVICE_EXISTS=$(aws ecs describe-services \
            --cluster "$CLUSTER_NAME" \
            --services "$SERVICE_NAME" \
            --query "failures[0].reason" \
            --output text 2>/dev/null)

          if [ "$SERVICE_EXISTS" = "MISSING" ] || [ "$SERVICE_EXISTS" = "ServiceNotFound" ]; then
            echo "Le service n'existe pas, création en cours : $SERVICE_NAME"
            aws ecs create-service \
              --cluster "$CLUSTER_NAME" \
              --service-name "$SERVICE_NAME" \
              --launch-type FARGATE \
              --task-definition "$TASK_DEF_ARN" \
              --desired-count 1 \
              --network-configuration "awsvpcConfiguration={subnets=[\"$SUBNET_1\",\"$SUBNET_2\"],securityGroups=[\"$SECURITY_GROUP_ID\"],assignPublicIp=\"ENABLED\"}" \
              --scheduling-strategy REPLICA
          else
            echo "Le service $SERVICE_NAME existe déjà — on passe à la suite"
          fi
      - name: Debug ECS Service Info
        run: |
          echo "Cluster name: $CLUSTER_NAME"
          echo "Service name: $SERVICE_NAME"
          echo "Task Definition ARN: $TASK_DEF_ARN"
          echo "Listing services in cluster $CLUSTER_NAME..."
          aws ecs list-services --cluster "$CLUSTER_NAME"     
      - name: Update ECS Service with latest task definition

        run: |
          echo "Using task definition: $TASK_DEF_ARN"
          aws ecs update-service \
            --cluster "$CLUSTER_NAME" \
            --service "$SERVICE_NAME" \
            --task-definition "$TASK_DEF_ARN" \
            --force-new-deployment

