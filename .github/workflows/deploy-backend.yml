name: Deploy FastAPI Backend

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
env:
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  ACCOUNT_ID: ${{ vars.ACCOUNT_ID }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  SECURITY_GROUP_ID: ${{ vars.SECURITY_GROUP_ID }}
  CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
  SERVICE_NAME: ${{ vars.SERVICE_NAME_BACKEND }}
  SUBNET_1: ${{ vars.SUBNET_1 }}
  SUBNET_2: ${{ vars.SUBNET_2 }}
  TG_ARN_BACKEND: ${{vars.TG_ARN_BACKEND}}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY \
          || aws ecr create-repository --repository-name $ECR_REPOSITORY

      - name: Build and push Docker image
        env:
          IMAGE_TAG: backend-${{ github.sha }}
        run: |
          IMAGE_URI=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}
          echo "IMAGE_URI=$IMAGE_URI" >> $GITHUB_ENV

          docker build -t $IMAGE_URI -f backend/app/Dockerfile.backend .
          docker push $IMAGE_URI

      - name: Register ECS Task Definition
        env:
          IMAGE_TAG: backend-${{ github.sha }}
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          IMAGE_URI=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}
          sed "s|{{IMAGE_URI}}|$IMAGE_URI|g; s|{{ACCOUNT_ID}}|$ACCOUNT_ID|g; s|{{OPENAI_API_KEY}}|$OPENAI_API_KEY|g" \
            .github/task-definitions/backend.json > backend-task.json

          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://backend-task.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)

          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Authorize security group ingress (port 80)
        run: |
          aws ec2 authorize-security-group-ingress \
            --group-id $SECURITY_GROUP_ID \
            --protocol tcp \
            --port 80 \
            --cidr 0.0.0.0/0 || echo "Ingress rule already exists or failed silently"

      - name: Delete service if it exists (clean for ALB recreation)
        continue-on-error: true
        run: |
          aws ecs update-service --cluster "$CLUSTER_NAME" --service "$SERVICE_NAME" --desired-count 0 || true
          aws ecs delete-service --cluster "$CLUSTER_NAME" --service "$SERVICE_NAME" --force || true

          echo "Waiting for ECS service to be fully deleted..."
            aws ecs wait services-inactive \
              --cluster $CLUSTER_NAME \
              --services $SERVICE_NAME
              
      - name: Create ECS Service with ALB
        run: |
          aws ecs create-service \
            --cluster "$CLUSTER_NAME" \
            --service-name "$SERVICE_NAME" \
            --launch-type FARGATE \
            --task-definition "$TASK_DEF_ARN" \
            --desired-count 1 \
            --network-configuration "awsvpcConfiguration={subnets=[\"$SUBNET_1\",\"$SUBNET_2\"],securityGroups=[\"$SECURITY_GROUP_ID\"],assignPublicIp=\"ENABLED\"}" \
            --load-balancers "targetGroupArn=$TG_ARN_BACKEND,containerName=smartbank-backend,containerPort=80" \
            --scheduling-strategy REPLICA

      - name: Update ECS Service with latest task definition
        run: |
          aws ecs update-service \
            --cluster "$CLUSTER_NAME" \
            --service "$SERVICE_NAME" \
            --task-definition "$TASK_DEF_ARN" \
            --force-new-deployment
