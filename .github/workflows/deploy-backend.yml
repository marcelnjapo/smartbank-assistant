name: Deploy FastAPI Backend

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'

env:
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  ACCOUNT_ID: ${{ vars.ACCOUNT_ID }}
  AWS_REGION: ${{ vars.AWS_REGION }}
  SECURITY_GROUP_ID: ${{ vars.SECURITY_GROUP_ID }}
  CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
  SERVICE_NAME: ${{ vars.SERVICE_NAME_BACKEND }}
  SUBNET_1: ${{ vars.SUBNET_1 }}
  SUBNET_2: ${{ vars.SUBNET_2 }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      - name: Create ECR repository if it doesn't exist
        run: |
          aws ecr describe-repositories --repository-names $ECR_REPOSITORY \
          || aws ecr create-repository --repository-name $ECR_REPOSITORY

      - name: Build and push Docker image
        run: |
          IMAGE_TAG=backend-${{ github.sha }}
          IMAGE_URI=${ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}

          docker build -t $IMAGE_URI -f backend/app/Dockerfile.backend .
          docker push $IMAGE_URI

      - name: Render ECS task definition with secrets
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: .github/task-definitions/backend.json
          container-name: backend
          image: ${{ env.ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:backend-${{ github.sha }}
          environment-variables: |
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}

      - name: Create ECS Service if not exists
        run: |
          SERVICE_EXISTS=$(aws ecs describe-services \
            --cluster "$CLUSTER_NAME" \
            --services "$SERVICE_NAME" \
            --query "failures[0].reason" \
            --output text 2>/dev/null)

          if [ "$SERVICE_EXISTS" = "MISSING" ] || [ "$SERVICE_EXISTS" = "ServiceNotFound" ]; then
            echo "Creating ECS service..."
            aws ecs create-service \
              --cluster "$CLUSTER_NAME" \
              --service-name "$SERVICE_NAME" \
              --launch-type FARGATE \
              --task-definition "${{ steps.render-task-def.outputs.task-definition }}" \
              --desired-count 1 \
              --network-configuration "awsvpcConfiguration={subnets=[\"$SUBNET_1\",\"$SUBNET_2\"],securityGroups=[\"$SECURITY_GROUP_ID\"],assignPublicIp=\"ENABLED\"}" \
              --scheduling-strategy REPLICA
          else
            echo "Service already exists."
          fi

      - name: Update ECS service to use new task definition
        run: |
          aws ecs update-service \
            --cluster "$CLUSTER_NAME" \
            --service "$SERVICE_NAME" \
            --task-definition "${{ steps.render-task-def.outputs.task-definition }}" \
            --force-new-deployment
